{"version":3,"sources":["Components/Common/Footer.js","Components/Common/TitleToolbar.js","Components/Pages/Annotation/DialogTable.js","Components/Pages/Annotation/Tables.js","Components/Pages/Annotation/Creator.js","Components/Pages/Annotation/DialogCard.js","Components/Pages/AnnotationPage.js","Components/Pages/DownloadPage.js","Components/Pages/UploadPage.js","Components/Pages/ErrorPage.js","Components/Page.js","index.js"],"names":["Footer","Typography","variant","align","color","component","Link","href","Date","getFullYear","useStyles","makeStyles","theme","toolbar","borderBottom","palette","divider","toolbarTitle","flex","toolbarSecondary","justifyContent","overflowX","toolbarLink","padding","spacing","flexShrink","marginLeft","marginRight","TitleToolbar","classes","React","useState","openHelp","setOpenHelp","Toolbar","className","Button","size","onClick","Dialog","open","onClose","DialogTitle","id","DialogContent","DialogContentText","noWrap","IconButton","tablepaper","height","width","marginTop","overflow","tableRow","backgroundColor","DialogTable","props","change","index","newStatus","newMeta","info","meta","oldStatus","status","newCount","count","setInfo","TableContainer","Paper","Table","TableHead","TableRow","TableCell","TableBody","data","dialogs","map","entry","type","hover","selected","turns","length","int","ent","select","Fragment","a11yProps","Tables","table","setTable","Grid","item","xs","Tabs","value","indicatorColor","textColor","onChange","event","n","Tab","label","active","finished","deleted","randomColor","require","Creator","setOpen","luminosity","creation","setCreation","close","entity","container","direction","alignItems","Box","style","border","borderRadius","TextField","autoFocus","margin","fullWidth","target","DialogActions","disabled","intention","newEntities","entities","push","newIntentions","intentions","handleCreate","DialogCard","addAlpha","opacity","Math","round","min","max","toString","toUpperCase","console","log","paddingBottom","paddingTop","Card","CardContent","display","fontSize","Divider","light","turn","i_turn","ButtonBase","index_remove","indexOf","splice","handleRemoveIntention","includes","speaker","handleSetIntention","gutterBottom","string","charAt","slice","split","i_split","i_id","substring","phrase","phrase_split","start","end_id","end","newDelex","handleRemoveEntity","cursor","verticalAlign","onMouseUp","selection","window","getSelection","anchorOffset","focusOffset","join","alert","handleSetEntity","Container","borderColor","stopPropagation","ctrlKey","handleSelectIntention","handleSelectEntity","Annotation","DownloadPage","startIcon","filename","output","intention_names","e","entity_names","ontology","Array","isArray","intents","actions","d","t","turn_meta","intent_type_ont","intent","intent_type","i","meta_delex","final_delex","start_id","newList","file","Blob","JSON","stringify","undefined","navigator","msSaveOrOpenBlob","a","document","createElement","url","URL","createObjectURL","download","body","appendChild","click","setTimeout","removeChild","revokeObjectURL","dropzone","maxWidth","textAlign","card","continueButton","IntroCard","md","title","subtitle","UploadPage","todo","manual","verification","range","settings","setSettings","handleTodo","name","checked","printError","error","explicit","message","handleFile","fileObjs","str","setTemp","parse","decodeURIComponent","atob","c","charCodeAt","SyntaxError","json_data","dropzoneText","onAdd","FormGroup","FormControlLabel","control","Switch","Slider","step","valueLabelFormat","valueLabelDisplay","floor","entities_id","Object","keys","intentions_id","concat","Set","sort","turnmeta","intent_name","intents_str","intention_list","replace","utterance_delex","oldDelex_split","entity_id","shift","utterance","handleConfirm","ErrorPage","themeLight","createTheme","background","default","Page","handleStep","nstep","sendInfo","CssBaseline","minHeight","paddingRight","paddingLeft","Stepper","activeStep","alternativeLabel","Step","StepLabel","ButtonGroup","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.8fe20fbc.chunk.js","sourcesContent":["import Link from '@material-ui/core/Link';\r\nimport React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nexport default function Footer() {\r\n    return(\r\n        <footer>\r\n            <Typography variant=\"body2\" align=\"center\" color=\"textSecondary\" component=\"p\">\r\n                {/* <ink href=\"#\" color=\"inherit\" onClick={() => {setOpenHelp(true)}}>\r\n                    Sobre | Ajuda\r\n                </Link>L */}\r\n            </Typography>\r\n            <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n                {'Copyright © '}\r\n                <Link color=\"inherit\" href=\"https://material-ui.com/\">\r\n                    IC do prof. Julio\r\n                </Link>{' '}\r\n                {new Date().getFullYear()}\r\n                {'.'}\r\n            </Typography>\r\n        </footer>\r\n    )\r\n}","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport GitHubIcon from '@material-ui/icons/GitHub';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    toolbar: {\r\n        borderBottom: `1px solid ${theme.palette.divider}`,\r\n    },\r\n    toolbarTitle: {\r\n        flex: 1,\r\n    },\r\n    toolbarSecondary: {\r\n        justifyContent: 'center',\r\n        overflowX: 'auto',\r\n    },\r\n    toolbarLink: {\r\n        padding: theme.spacing(1),\r\n        flexShrink: 0,\r\n        marginLeft: '3rem',\r\n        marginRight: '3rem',\r\n    },\r\n}));\r\n\r\nexport default function TitleToolbar() {\r\n    const classes = useStyles();\r\n    const [openHelp, setOpenHelp] = React.useState(false);\r\n    return(\r\n        <Toolbar className={classes.toolbar}>\r\n            <Button size=\"small\" onClick={() => {setOpenHelp(true)}}>Sobre | Ajuda</Button>\r\n            <Dialog\r\n                open={openHelp}\r\n                onClose={() => {setOpenHelp(false)}}\r\n                aria-labelledby=\"alert-dialog-title\"\r\n                aria-describedby=\"alert-dialog-description\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-title\">{\"Sobre o IAnotador\"}</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-description\">\r\n                        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus maximus quam dapibus massa viverra, sed convallis dolor bibendum. Morbi ornare eros vel orci porttitor, sit amet molestie nisl varius. Curabitur velit dolor, egestas quis ex eu, commodo mattis eros. In tortor magna, vulputate maximus convallis sit amet, suscipit in mauris. Praesent tempor eleifend enim ut convallis. Nam vehicula est vitae turpis fringilla vestibulum a lacinia sem. Fusce varius vulputate metus, malesuada sollicitudin arcu pulvinar id. Nam eleifend ornare erat, eu lacinia nibh iaculis ac. Donec sollicitudin risus in orci lacinia accumsan. Proin vulputate dictum viverra.\r\n                        Feito com ❤️ pelo Andreis. Baseado no Design do Henrique.\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n            </Dialog>\r\n            <Typography\r\n                component=\"h2\"\r\n                variant=\"h5\"\r\n                color=\"inherit\"\r\n                align=\"center\"\r\n                noWrap\r\n                className={classes.toolbarTitle}\r\n                >\r\n                IAnotador\r\n            </Typography>\r\n            <IconButton>\r\n                <GitHubIcon />\r\n            </IconButton>\r\n            <Button variant=\"outlined\" size=\"small\">\r\n                Source\r\n            </Button>\r\n        </Toolbar>\r\n    )\r\n}","import CheckIcon from '@material-ui/icons/Check';\r\nimport CreateIcon from '@material-ui/icons/Create';\r\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport KeyboardReturnIcon from '@material-ui/icons/KeyboardReturn';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport React from 'react';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableBody from '@material-ui/core/TableBody';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    tablepaper: {\r\n        height: 600,\r\n        width: '100%',\r\n        marginTop: theme.spacing(3),\r\n        overflow: 'auto',\r\n    },\r\n    tableRow: {\r\n        \"&.Mui-selected, &.Mui-selected:hover\": {\r\n            backgroundColor: '#e8eaf6',\r\n        }\r\n    }\r\n}));\r\n\r\nexport default function DialogTable(props){\r\n    const classes = useStyles();\r\n    function select(index){\r\n        props.setInfo({...props.info, selected: index});\r\n    }\r\n    function change(index,newStatus){\r\n        let newMeta = props.info.meta;\r\n        const oldStatus = newMeta[index].status\r\n        newMeta[index].status=newStatus\r\n        let newCount = props.info.count;\r\n        newCount[oldStatus]--;\r\n        newCount[newStatus]++;\r\n        props.setInfo({...props.info, meta: newMeta, count: newCount});\r\n    }\r\n    return(\r\n        <TableContainer component={Paper} className={classes.tablepaper}>\r\n            <Table size=\"small\" aria-label=\"a dense table\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell>Dialogo</TableCell>\r\n                        <TableCell>Turnos | Int. | Ent.</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {props.info.data.dialogs.map((entry, index) => {\r\n                        if(props.type===props.info.meta[index].status) \r\n                            return(\r\n                                <TableRow hover selected={props.info.selected===index} className={classes.tableRow} key={index}>\r\n                                    <TableCell>ID{entry.id}</TableCell>\r\n                                    <TableCell>{entry.turns.length} | {props.info.meta[index].int} | {props.info.meta[index].ent}</TableCell>\r\n                                    <TableCell>\r\n                                        <IconButton size='small' onClick={()=>select(index)}>\r\n                                            <CreateIcon />\r\n                                        </IconButton>\r\n                                        {props.info.meta[index].status===\"active\"?\r\n                                            <React.Fragment>\r\n                                                <IconButton size='small' onClick={()=>change(index,\"finished\")}>\r\n                                                    <CheckIcon />\r\n                                                </IconButton>\r\n                                                <IconButton size='small' onClick={()=>change(index,\"deleted\")}>\r\n                                                    <DeleteOutlineIcon />\r\n                                                </IconButton>\r\n                                            </React.Fragment>\r\n                                        :\r\n                                            <IconButton size='small' onClick={()=>change(index,\"active\")}>\r\n                                                <KeyboardReturnIcon />\r\n                                            </IconButton>\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            )\r\n                        else\r\n                            return null;\r\n                    })}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    )\r\n}","import Grid from '@material-ui/core/Grid';\r\nimport React from 'react';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\n\r\nimport DialogTable from './DialogTable.js';\r\n\r\nfunction a11yProps(index) {\r\n    return {\r\n      id: `simple-tab-${index}`,\r\n      'aria-controls': `simple-tabpanel-${index}`,\r\n    };\r\n  }\r\n\r\nexport default function Tables(props) {\r\n    const [table, setTable] = React.useState(0);\r\n    return(\r\n        <Grid item xs={5}>\r\n            <Tabs value={table} indicatorColor=\"primary\" textColor=\"primary\" onChange={(event, n) => setTable(n)} aria-label=\"simple tabs example\">\r\n                <Tab label={\"Ativos \"+props.info.count.active} {...a11yProps(0)} />\r\n                <Tab label={\"Completos \"+props.info.count.finished} {...a11yProps(1)} />\r\n                <Tab label={\"Deletados \"+props.info.count.deleted} {...a11yProps(2)} />\r\n            </Tabs>\r\n            {table===0?<DialogTable type=\"active\" {...props} />\r\n            :table===1?<DialogTable type=\"finished\" {...props} />\r\n            :<DialogTable type=\"deleted\" {...props} />}\r\n        </Grid>\r\n    )\r\n}","import AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\r\nimport Button from '@material-ui/core/Button';\r\nimport Box from '@material-ui/core/Box';\r\nimport CasinoIcon from '@material-ui/icons/Casino';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nvar randomColor = require('randomcolor');\r\n\r\nexport default function Creator(props) {\r\n    const [open, setOpen] = React.useState(false);\r\n    const [creation, setCreation] = React.useState({color: randomColor({luminosity: 'dark'}), value: ''})\r\n    function handleCreate(){\r\n        if(props.entity && !props.intention){\r\n            let newEntities = props.info.entities;\r\n            newEntities.push(creation);\r\n            props.setInfo({...props.info, entities: newEntities});\r\n        }\r\n        else if(props.intention){\r\n            let newIntentions = props.info.intentions;\r\n            newIntentions.push(creation);\r\n            props.setInfo({...props.info, intentions: newIntentions});\r\n        }\r\n    }\r\n    function close(){\r\n        setCreation({color: randomColor(),value:''});\r\n        setOpen(false);\r\n    }\r\n    return(\r\n        <>\r\n            <IconButton size='small' onClick={() => {setOpen(true)}}>\r\n                <AddCircleOutlineIcon />\r\n            </IconButton>\r\n            <Dialog\r\n                open={open}\r\n                onClose={() => close()}\r\n                aria-labelledby=\"alert-dialog-title\"\r\n                aria-describedby=\"alert-dialog-description\"\r\n                >\r\n                <DialogTitle id=\"alert-dialog-title\">{\"Criar \" + (props.entity? \"Entidade\" : \"Intenção\")}</DialogTitle>\r\n                <DialogContent>\r\n                    <Grid container direction=\"row\" justifyContent=\"flex-start\" alignItems=\"center\" spacing={1}>\r\n                            <Grid item>\r\n                                <Box style={{width:'1.5rem',height:'1.5rem', backgroundColor: creation.color, border: 'thin solid grey', borderRadius: '0.3rem'}}/>\r\n                            </Grid>\r\n                        <Grid item>\r\n                            <IconButton onClick={() => setCreation({...creation, color: randomColor()})}>\r\n                                <CasinoIcon />\r\n                            </IconButton>\r\n                        </Grid>\r\n                    </Grid>\r\n                        <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        id=\"intention\"\r\n                        label={\"Nome da \" + (props.entity? \"Entidade\" : \"Intenção\")}\r\n                        fullWidth\r\n                        onChange={event => setCreation({...creation, value: event.target.value})}\r\n                        />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => close()} color=\"primary\">\r\n                        Cancelar\r\n                    </Button>\r\n                    <Button disabled={!creation.value} onClick={() => {handleCreate();close()}} color=\"primary\">\r\n                        Criar\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}","import Button from '@material-ui/core/Button';\r\nimport ButtonBase from '@material-ui/core/ButtonBase';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Container from '@material-ui/core/Container';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport Creator from './Creator.js';\r\n\r\nexport default function DialogCard(props){\r\n    function capitalize(string) {\r\n        return string.charAt(0).toUpperCase() + string.slice(1);\r\n    }\r\n    function addAlpha(color, opacity) {\r\n        const _opacity = Math.round(Math.min(Math.max(opacity || 1, 0), 1) * 255);\r\n        return color + _opacity.toString(16).toUpperCase();\r\n    }\r\n    function handleSelectEntity(index){\r\n        props.setInfo({...props.info, entity: index, intention: -1});\r\n    }\r\n    function handleSelectIntention(event,index){\r\n        event.stopPropagation();\r\n        if (event.ctrlKey){\r\n            alert(\"Not actually deleting intention \"+props.info.intentions[index].value)\r\n        }\r\n        else{\r\n            props.setInfo({...props.info, entity: -1, intention: index});\r\n        }\r\n    }\r\n    function handleSetIntention(i_turn){\r\n        if(props.info.intention >= 0 && !props.info.meta[props.info.selected].turns[i_turn].intentions.includes(props.info.intention)){\r\n            let newDialogs = props.info.data.dialogs;\r\n            const speaker = newDialogs[props.info.selected].turns[i_turn].speaker\r\n            const intent = speaker===\"agent\"? \"action\":\"intent\"\r\n            let newMeta = props.info.meta\r\n            newMeta[props.info.selected].turns[i_turn].intentions.push(props.info.intention);\r\n            newMeta[props.info.selected].int++;\r\n            props.setInfo({...props.info, meta: newMeta});\r\n        }\r\n    }\r\n    function handleRemoveIntention(int,i_turn){\r\n        let newMeta = props.info.meta\r\n        const index_remove = newMeta[props.info.selected].turns[i_turn].intentions.indexOf(int);\r\n        if (index_remove > -1) {\r\n            newMeta[props.info.selected].turns[i_turn].intentions.splice(index_remove, 1);\r\n            newMeta[props.info.selected].int--;\r\n        }\r\n        props.setInfo({...props.info, meta: newMeta});\r\n    }\r\n    function handleSetEntity(i_turn,i_split){\r\n        if(props.info.entity >= 0){\r\n            let selection = window.getSelection();\r\n            const start = selection.anchorOffset;\r\n            const end = selection.focusOffset;\r\n            let phrase = props.info.meta[props.info.selected].turns[i_turn].entities\r\n            let phrase_split = phrase.split('###')\r\n            if(i_split%2===0 && end>start && phrase.indexOf(selection.toString())!==-1){\r\n                phrase_split[i_split] = phrase_split[i_split].substring(0,start)+'###'+phrase_split[i_split].substring(start,end)+'&&&'+props.info.entity+'###'+phrase_split[i_split].substring(end)\r\n                let newMeta = props.info.meta;\r\n                newMeta[props.info.selected].ent++;\r\n                newMeta[props.info.selected].turns[i_turn].entities = phrase_split.join('###')\r\n                props.setInfo({...props.info, meta: newMeta});\r\n            }\r\n            else{\r\n                alert(\"Selecione uma área sem uma entidade!\")\r\n            }\r\n        }\r\n    }\r\n    function handleRemoveEntity(i_turn, i_split){\r\n        const phrase = props.info.meta[props.info.selected].turns[i_turn].entities\r\n        const phrase_split = phrase.split('###')\r\n        const start = phrase.indexOf(phrase_split[i_split])\r\n        const end_id = phrase.indexOf('&&&', start)\r\n        const end = phrase.indexOf('###', start)\r\n        const newDelex = phrase.substring(0,start-3)+phrase.substring(start,end_id)+phrase.substring(end+3)\r\n        let newMeta = props.info.meta;\r\n        newMeta[props.info.selected].ent--;\r\n        newMeta[props.info.selected].turns[i_turn].entities = newDelex\r\n        props.setInfo({...props.info, meta: newMeta});\r\n    }\r\n    console.log(props.info)\r\n    return(\r\n        <Grid item xs={12} style={{paddingBottom:'1rem',paddingTop:'1rem'}}>\r\n            <Card>\r\n                <CardContent>\r\n                    <Typography variant='h6'>\r\n                        Dialogo Nº{props.info.data.dialogs[props.info.selected].id}\r\n                    </Typography>\r\n                    <Grid container direction=\"column\" justifyContent=\"flex-start\" alignItems=\"stretch\" spacing={4}>\r\n                            <Grid item container direction=\"row\" justifyContent=\"flex-start\" alignItems=\"flex-end\" spacing={1}>\r\n                                <Grid item style={{width:'5rem'}}>\r\n                                    <Typography variant=\"caption\" display=\"block\" style={{fontSize:'0.6rem',color:'grey'}}>\r\n                                        Intenções\r\n                                    </Typography>\r\n                                    <Divider light />\r\n                                </Grid>\r\n                                <Grid item>\r\n                                </Grid>\r\n                            </Grid>\r\n                            {props.info.data.dialogs[props.info.selected].turns.map((turn, i_turn) => (\r\n                                <Grid item container direction=\"row\" justifyContent=\"flex-start\" alignItems=\"flex-end\" spacing={1}>\r\n                                    <Grid item xs={2}>\r\n                                        {\r\n                                            props.info.meta[props.info.selected].turns[i_turn].intentions.map((int) => (\r\n                                                <ButtonBase onClick={()=>{handleRemoveIntention(int,i_turn)}} style={{padding:'1px', border:'thin solid '+props.info.intentions[int].color, borderRadius:'5px'}}>\r\n                                                    <Typography variant=\"caption\" display=\"block\" style={{fontSize:'0.6rem',color:props.info.intentions[int].color}}>\r\n                                                        {props.info.intentions[int].value}\r\n                                                    </Typography>\r\n                                                </ButtonBase>\r\n                                            ))\r\n                                        }\r\n                                        <ButtonBase onClick={()=>handleSetIntention(i_turn)} style={{padding:'1px 3px 1px 3px', border:'thin solid grey', borderRadius:'5px'}}>\r\n                                            <Typography variant=\"caption\" display=\"block\" style={{fontSize:'0.6rem',color:'grey'}}>\r\n                                                +\r\n                                            </Typography>\r\n                                        </ButtonBase>\r\n                                        <Divider light />\r\n                                    </Grid>\r\n                                    <Grid item xs={10}>\r\n                                        <Typography component=\"p\" gutterBottom>\r\n                                            <b>{capitalize(turn.speaker)}: </b>\r\n                                                {props.info.meta[props.info.selected].turns[i_turn].entities.split(\"###\").map((entry, i_split) => {\r\n                                                    if(i_split%2){\r\n                                                        const i_id = entry.indexOf('&&&')\r\n                                                        const color = props.info.entities[entry.substring(i_id+3)].color\r\n                                                        return <span onClick={()=>handleRemoveEntity(i_turn, i_split)} style={{border:'thin solid '+color, borderRadius: '5px', padding:'2px', cursor: 'pointer', color:color}} className='noselect'>{entry.substring(0,i_id)}\r\n                                                            <span style={{fontSize: '8px', display: 'table-cell', verticalAlign: 'middle', backgroundColor: addAlpha(color,0.3), padding:'2px', borderRadius:'4px'}}>{props.info.entities[entry.substring(i_id+3)].value}</span>\r\n                                                        </span>\r\n                                                    }else\r\n                                                        return <span onMouseUp={()=>handleSetEntity(i_turn,i_split)}>{entry}</span>\r\n                                                })}\r\n                                        </Typography>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            ))}\r\n                    </Grid>\r\n                </CardContent>\r\n                <Container>\r\n                    Intenções:\r\n                    {props.info.intentions.map((entry, index) => (\r\n                        <Button size=\"small\" variant=\"outlined\" style={{borderColor: entry.color, color: entry.color}} onClick={(event) => handleSelectIntention(event,index)}>{entry.value}</Button>\r\n                    ))}\r\n                    <Creator intention {...props}/>\r\n                    <Divider light />\r\n                    Entidades:\r\n                    {props.info.entities.map((entry, index) => (\r\n                        <Button size=\"small\" variant=\"outlined\" style={{borderColor: entry.color, color: entry.color}} onClick={() => handleSelectEntity(index)}>{entry.value}</Button>\r\n                    ))}\r\n                    <Creator entity {...props}/>\r\n                </Container>\r\n            </Card>\r\n        </Grid>\r\n    )\r\n}","import Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n\r\nimport Tables from './Annotation/Tables.js';\r\nimport DialogCard from './Annotation/DialogCard.js';\r\n\r\nexport default function Annotation(props) {\r\n    return(\r\n        <Grid item container xs={12} direction=\"row\" justifyContent=\"flex-start\" alignItems=\"center\" spacing={1} style={{paddingTop:'1rem'}}>       \r\n            <Tables {...props}/>\r\n            <Grid item container xs={7} direction=\"column\" justifyContent=\"flex-start\" alignItems=\"center\">\r\n                {props.info.selected!==-1?\r\n                    <DialogCard {...props}/>\r\n                :\r\n                    <Grid item xs={12}>\r\n                        <Card>\r\n                            <CardContent>\r\n                                <Typography style={{color: 'grey'}}>\r\n                                    Intenções\r\n                                </Typography>\r\n                                <Typography variant=\"body2\" component=\"p\">\r\n                                    Selecione um dialogo para começar\r\n                                </Typography>\r\n                            </CardContent>\r\n                        </Card>\r\n                    </Grid>\r\n                }\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}","import Button from '@material-ui/core/Button';\r\nimport GetAppIcon from '@material-ui/icons/GetApp';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nexport default function DownloadPage(props) {\r\n    // Terminar na V0:\r\n    // - entidades no arquivo de saida\r\n    // - tirar dialogos marcadas como deletados\r\n    // V0.1:\r\n    // - Passar a tabela para o drawer lateral\r\n    // - Nova barra de ferramentas\r\n    // - Deletar intenções e entidades (usar o marcador)\r\n    function download() {\r\n        const filename = props.info.filename.substring(0,props.info.filename.length-5)+'_anotado.json';\r\n        let output = props.info.data;\r\n        let meta = props.info.meta;\r\n        let intention_names = props.info.intentions.map((e) => (e.value))\r\n        let entity_names = props.info.entities.map((e) => (e.value))\r\n        output.ontology[\"slot-values\"] = {}\r\n        if(!Array.isArray(output.ontology.intents)){\r\n            output.ontology.intents = []\r\n        }\r\n        if(!Array.isArray(output.ontology.actions)){\r\n            output.ontology.actions = []\r\n        }\r\n        // console.log(props.info)\r\n        for(let d=0;d<output.dialogs.length;d++){\r\n            for(let t=0;t<output.dialogs[d].turns.length;t++){\r\n                let turn = output.dialogs[d].turns[t]\r\n                let turn_meta = meta[d].turns[t]\r\n                // Intenções\r\n                let intent_type_ont = turn.intent?'intents':'actions'\r\n                let intent_type = turn[\"turn-num\"]%2?'action':'intent'\r\n                console.log(intent_type);\r\n                turn[intent_type] = ''\r\n                for(let i=0;i<turn_meta.intentions.length;i++){\r\n                    let intention = intention_names[turn_meta.intentions[i]]\r\n                    if(!output.ontology[intent_type_ont]){\r\n                        output.ontology[intent_type_ont] = [intention]\r\n                    }\r\n                    else if(!output.ontology[intent_type_ont].includes(intention)){\r\n                        output.ontology[intent_type_ont].push(intention)\r\n                    }\r\n                    turn[intent_type] = turn[intent_type] +'['+intention+']'\r\n                }\r\n                // Entidades\r\n                let meta_delex = meta[d].turns[t].entities.split('###')\r\n                let final_delex = ''\r\n                turn['slot-values'] = {}\r\n                for(let i=0;i<meta_delex.length;i++){\r\n                    let start_id = meta_delex[i].indexOf('&&&')\r\n                    if(start_id===-1){\r\n                        final_delex = final_delex + meta_delex[i]\r\n                    }\r\n                    else{\r\n                        let entity = entity_names[meta_delex[i].substring(start_id+3)]\r\n                        let value = meta_delex[i].substring(0,start_id)\r\n                        final_delex = final_delex + '['+entity+']'\r\n                        // Adicionando na ontologia\r\n                        if(!output.ontology['slot-values'][entity]){\r\n                            output.ontology['slot-values'][entity] = [value]\r\n                        }\r\n                        else if(!output.ontology['slot-values'][entity].includes(value)){\r\n                            output.ontology['slot-values'][entity].push(value)\r\n                        }\r\n                        // Adicionando no slot-values\r\n                        if(!(entity in turn['slot-values'])){\r\n                            turn['slot-values'][entity]=value;\r\n                        }\r\n                        else{\r\n                            if(Array.isArray(turn['slot-values'][entity])){\r\n                                if(!turn['slot-values'][entity].includes(value)){\r\n                                    turn['slot-values'][entity].push(value);\r\n                                }\r\n                            }\r\n                            // Se não for uma lista, preciso ou verificar se não é o mesmo valor, ou criar uma lista\r\n                            else{\r\n                                if(!(value===turn['slot-values'][entity])){\r\n                                    let newList = [turn['slot-values'][entity],value];\r\n                                    turn['slot-values'][entity] = newList;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                turn[\"utterance_delex\"] = final_delex;\r\n            }\r\n        }\r\n        var file = new Blob([JSON.stringify(output,undefined,2)], {type: \"application/json\"});\r\n        if (window.navigator.msSaveOrOpenBlob) // IE10+\r\n            window.navigator.msSaveOrOpenBlob(file, filename);\r\n        else { // Others\r\n            var a = document.createElement(\"a\"), url = URL.createObjectURL(file);\r\n            a.href = url;\r\n            a.download = filename;\r\n            document.body.appendChild(a);\r\n            a.click();\r\n            setTimeout(function() {\r\n                document.body.removeChild(a);\r\n                window.URL.revokeObjectURL(url);\r\n            }, 0);\r\n        }\r\n    }\r\n    return(\r\n        <Grid item container direction=\"column\" justifyContent=\"center\" alignItems=\"center\">\r\n            <Typography style={{paddingTop:'13rem',paddingBottom:'2rem'}}>\r\n                Parabéns, seu dataset está anotado!\r\n            </Typography>\r\n            <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                size=\"large\"\r\n                startIcon={<GetAppIcon />}\r\n                onClick={() => download()}\r\n                >\r\n                Download\r\n            </Button>\r\n        </Grid>\r\n    )\r\n}\r\n","import Button from '@material-ui/core/Button';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport React from 'react';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport {DropzoneAreaBase} from 'material-ui-dropzone';\r\nimport randomColor from 'randomcolor';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    dropzone: {\r\n        paddingTop: '1rem',\r\n        margin: 'auto',\r\n        maxWidth: '50rem',\r\n        textAlign: 'center'\r\n    },\r\n    card: {\r\n        textAlign: 'left'   \r\n    },\r\n    continueButton: {\r\n        marginTop: '1rem',\r\n    },\r\n}));\r\n\r\nfunction IntroCard(props){\r\n    const classes = useStyles();\r\n    return(\r\n        <Grid item xs={12} md={6}>\r\n            <Card className={classes.card}>\r\n                <CardContent>\r\n                    <Typography component=\"h2\" variant=\"h5\">\r\n                        {props.title}\r\n                    </Typography>\r\n                    <Typography variant=\"subtitle1\" color=\"textSecondary\">\r\n                        {props.subtitle}\r\n                    </Typography>\r\n                    <Typography variant=\"subtitle1\" color=\"primary\">\r\n                        Ler mais\r\n                    </Typography>\r\n                </CardContent>\r\n            </Card>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default function UploadPage(props) {\r\n    const classes = useStyles();\r\n    const [settings, setSettings] = React.useState({\r\n        todo: {\r\n            manual: true,\r\n            verification: false,\r\n            download: false,\r\n        },\r\n        filename: '',\r\n        data: {dialogs: []},\r\n        open: false,\r\n        range: [0,100],\r\n    });\r\n    function handleTodo(event){\r\n        setSettings({...settings, todo: {...settings.todo, [event.target.name]: event.target.checked}});\r\n    }\r\n    const handleRange = (event,range) => {\r\n        setSettings({...settings, range: range});\r\n    }\r\n    function b64DecodeUnicode(str) {\r\n        return decodeURIComponent(atob(str).split('').map(function(c) {\r\n            return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\r\n        }).join(''));\r\n    }\r\n    var printError = function(error, explicit) {\r\n        console.log(`[${explicit ? 'EXPLICIT' : 'INEXPLICIT'}] ${error.name}: ${error.message}`);\r\n    }\r\n    function handleFile(fileObjs){\r\n        const filename = fileObjs[0].file.name\r\n        console.log(filename +'-'+fileObjs[0].file)\r\n        try {\r\n            let result = JSON.parse(b64DecodeUnicode(fileObjs[0].data.substring(29)));\r\n            setTemp(filename,result);\r\n        } catch (e) {\r\n            alert(\"Seu .json está com problemas, verifique se ele não há caracteres faltando ou errados\\n(veja o erro no console.log)\");\r\n            if (e instanceof SyntaxError) {\r\n                printError(e, true);\r\n            } else {\r\n                printError(e, false);\r\n            }\r\n        }\r\n    } \r\n    function seeExample(){\r\n        const example = require('../../ExampleData/creditos_placa_errada_8.json');\r\n        setTemp('creditos_placa_errada_8.json',example)\r\n    }\r\n    function setTemp(filename,json_data){\r\n        setSettings({...settings, filename: filename, data:json_data, range: [0,json_data.dialogs.length-1], open: true});\r\n    }\r\n    function handleConfirm(){\r\n        let json_data = settings.data\r\n        // TODO depois corrige isso aqui pra nao descartar dialogos\r\n        // json_data.dialogs = json_data.dialogs.slice(settings.range[0],settings.range[1]);\r\n        let meta = []\r\n        let count = {active: json_data.dialogs.length, finished: 0, deleted: 0}\r\n        let entities_id = Object.keys(json_data.ontology['slot-values']);\r\n        let entities = entities_id.map((value) => ({color: randomColor({luminosity: 'dark'}), value: value}))\r\n        let intentions_id = json_data.ontology.intents.concat(json_data.ontology.actions);\r\n        intentions_id = [...new Set(intentions_id)].sort();\r\n        let intentions = intentions_id.map((value) => ({color: randomColor({luminosity: 'dark'}), value: value}))\r\n        console.log(json_data.dialogs.length);\r\n        for(let d=0;d<json_data.dialogs.length;d++){\r\n            let turnmeta = []\r\n            let int = 0;\r\n            let ent = 0;\r\n            for(let t=0;t<json_data.dialogs[d].turns.length;t++){\r\n                let turn = json_data.dialogs[d].turns[t]\r\n                // Parte das intenções\r\n                let intent_name = turn.speaker===\"client\"?\"intent\":\"action\";\r\n                let intents_str = turn[intent_name]\r\n                let intention_list = []\r\n                if(intents_str&&intents_str!==\"\"){\r\n                    let intents = turn[intent_name].replace(\"]\",\"\").split(\"[\");\r\n                    // Criar intenção que não está na lista\r\n                    for(let i=0;i<intents.length;i++){\r\n                        let intent = intents[i].replace(\"]\",\"\")\r\n                        if(intent!==''){\r\n                            if(!intentions_id.includes(intent)){\r\n                                intentions_id.push(intent)\r\n                                intentions.push({color: randomColor({luminosity: 'dark'}), value: intent})\r\n                            }\r\n                            intention_list.push(intentions_id.indexOf(intent));\r\n                            int++;\r\n                        }\r\n                    }\r\n                }\r\n                // Parte das entidades\r\n                let newDelex = '';\r\n                if(turn.utterance_delex){\r\n                    let oldDelex = turn.utterance_delex;\r\n                    let oldDelex_split = oldDelex.split('[')\r\n                    for(let i=0;i<oldDelex_split.length;i++){\r\n                        let end = oldDelex_split[i].indexOf(']')\r\n                        if(end!==-1){\r\n                            let entity = oldDelex_split[i].substring(0,end);\r\n                            let value = turn[\"slot-values\"][entity]\r\n                            if(!entities_id.includes(entity)){\r\n                                entities_id.push(entity)\r\n                                entities.push({color: randomColor({luminosity: 'dark'}), value: entity})\r\n                            }\r\n                            let entity_id = entities_id.indexOf(entity)\r\n                            if(Array.isArray(value)){\r\n                                newDelex = newDelex + '###'+value.shift()+'&&&'+entity_id+'###'+oldDelex_split[i].substring(end+1)\r\n                            }\r\n                            else{\r\n                                newDelex = newDelex + '###'+value+'&&&'+entity_id+'###'+oldDelex_split[i].substring(end+1)\r\n                            }\r\n                            ent++;\r\n                        }\r\n                        else{\r\n                            newDelex = newDelex + oldDelex_split[i]\r\n                        }\r\n                    }\r\n                }\r\n                turnmeta.push({\r\n                    intentions: intention_list,\r\n                    entities: newDelex?newDelex:json_data.dialogs[d].turns[t].utterance\r\n                })\r\n            }\r\n            meta.push({int: int, ent: ent, status:\"active\", turns: turnmeta})\r\n        }\r\n        props.setInfo({...props.info, entities: entities, intentions: intentions, filename: settings.filename, data: json_data, meta: meta, count: count, step: 0});\r\n        setSettings({\r\n            todo: {\r\n                manual: true,\r\n                verification: false,\r\n                download: false,\r\n            },\r\n            data: {dialogs: []},\r\n            open: false,\r\n            dialogs: 0,\r\n        })\r\n    }\r\n\r\n\r\n    return(\r\n        <main className={classes.dropzone}>\r\n            <Grid container direction=\"row\" justifyContent=\"center\" alignItems=\"center\" spacing={2} style={{paddingBottom: '2rem'}}>\r\n                <IntroCard\r\n                    title=\"Como a ferramenta funciona\"\r\n                    subtitle=\"O que é Active Learning e como utilizar para anotar seu dataset\"\r\n                />\r\n                <IntroCard\r\n                    title=\"Como instalar a sua versão da ferramenta\"\r\n                    subtitle=\"Para usar treinar seu chatbot\"\r\n                />\r\n            </Grid>\r\n            <DropzoneAreaBase\r\n                dropzoneText=\"Adicione as conversas do seu Chatbot\"\r\n                onAdd={(fileObjs) => {handleFile(fileObjs)}}\r\n                />\r\n            <Button variant=\"contained\" color=\"primary\" className={classes.continueButton} onClick={() => seeExample()}>\r\n                Veja os dados de Exemplo\r\n            </Button>\r\n            <Dialog\r\n                open={settings.open}\r\n                onClose={() => setSettings({...settings, data: {dialogs: []}, open: false})}\r\n                aria-labelledby=\"alert-dialog-title\"\r\n                aria-describedby=\"alert-dialog-description\"\r\n                maxWidth='sm'\r\n                fullWidth={true}\r\n                >\r\n                <DialogContent>\r\n                    <Typography variant='h5'>\r\n                        {\"Arquivo \" + settings.filename}\r\n                    </Typography>\r\n                    <Grid container direction=\"column\" justifyContent=\"flex-start\" alignItems=\"center\">\r\n                        <Typography variant=\"h6\">\r\n                            O que você deseja fazer?\r\n                        </Typography>\r\n                        <FormGroup>\r\n                            <FormControlLabel\r\n                            control={<Switch disabled checked={settings.todo.manual} onChange={handleTodo} color=\"primary\" name=\"manual\" />}\r\n                            label=\"Anotação Manual\"\r\n                            />\r\n                            {settings.todo.manual?\r\n                                <>\r\n                                    <Slider value={settings.range} onChange={handleRange} aria-labelledby=\"range-slider\"\r\n                                        step={1}\r\n                                        min={0}\r\n                                        max={settings.data.dialogs.length-1}\r\n                                        valueLabelFormat={(value) => {return value}}\r\n                                        valueLabelDisplay=\"auto\"\r\n                                    />\r\n                                    <Typography variant=\"caption\">\r\n                                        Você anotará <b>{Math.floor(settings.range[1]-settings.range[0])}</b> dialogos (ID{settings.data.dialogs[settings.range[0]]?settings.data.dialogs[settings.range[0]].id:0} - ID{settings.data.dialogs[settings.range[1]]?settings.data.dialogs[settings.range[1]].id:0})\r\n                                    </Typography>\r\n                                </>\r\n                            :null}\r\n                            <FormControlLabel\r\n                            control={<Switch disabled checked={settings.todo.verification} onChange={handleTodo} color=\"primary\" name=\"verification\" />}\r\n                            label=\"Active Learning\"\r\n                            />\r\n                            <FormControlLabel\r\n                            control={<Switch disabled checked={settings.todo.download} onChange={handleTodo} color=\"primary\" name=\"download\" />}\r\n                            label=\"Donwload do Dataset\"\r\n                            />\r\n                        </FormGroup>\r\n                        {!settings.todo.manual && !settings.todo.verification?\r\n                        <Typography variant=\"caption\">\r\n                            A IA pré-treinada fará <b>toda a anotação</b> para você\r\n                        </Typography>\r\n                        :settings.todo.manual && !settings.todo.verification?\r\n                        <Typography variant=\"caption\">\r\n                            Você irá anotar algumas <b>intenções e entidades</b> para a IA.\r\n                        </Typography>\r\n                        :settings.todo.manual && settings.todo.verification?\r\n                        <Typography variant=\"caption\">\r\n                            Você irá anotar <b>intenções, entidades,</b> e ainda ajudar a <b>verificar</b> as que a IA anotou.\r\n                        </Typography>\r\n                        :\r\n                        <Typography variant=\"caption\">\r\n                            Você irá <b>conferir e arrumar</b> as anotações feitas pela IA.\r\n                        </Typography>\r\n                        }\r\n                    </Grid>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => setSettings({...settings, data: {dialogs: []}, open: false})} color=\"primary\">\r\n                        Cancelar\r\n                    </Button>\r\n                    <Button onClick={() => handleConfirm()} color=\"primary\">\r\n                        Confirmar\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </main>\r\n    )\r\n}\r\n","import Grid from '@material-ui/core/Grid';\r\nimport React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nexport default function ErrorPage(props) {\r\n    return(\r\n        <Grid item container direction=\"column\" justifyContent=\"center\" alignItems=\"center\">\r\n            <Typography style={{paddingTop:'13rem',paddingBottom:'2rem'}}>\r\n                Olá, se você está vendo essa página, há algum problema na navegação dos passos. Por favor informe os administradores sobre o problema.\r\n            </Typography>\r\n        </Grid>\r\n    )\r\n}","import Button from '@material-ui/core/Button';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\nimport Container from '@material-ui/core/Container';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport React from 'react';\r\nimport { MuiThemeProvider, createTheme } from \"@material-ui/core/styles\";\r\nimport Stepper from '@material-ui/core/Stepper';\r\nimport Step from '@material-ui/core/Step';\r\nimport StepLabel from '@material-ui/core/StepLabel';\r\n\r\nimport Footer from './Common/Footer.js';\r\nimport TitleToolbar from './Common/TitleToolbar.js';\r\nimport AnnotationPage from './Pages/AnnotationPage.js';\r\nimport DownloadPage from './Pages/DownloadPage.js';\r\nimport UploadPage from './Pages/UploadPage.js';\r\nimport ErrorPage from './Pages/ErrorPage.js';\r\n\r\nconst themeLight = createTheme({\r\n    palette: {\r\n        background: {\r\n            default: \"#ffff\"\r\n        },\r\n    }\r\n});\r\n\r\nexport default function Page() {\r\n    const [info, setInfo] = React.useState({\r\n      filename: '',\r\n      step: -1,\r\n      selected: -1,\r\n      data: {},\r\n      meta: [],\r\n      intention: -1,\r\n      intentions: [],\r\n      count: {active: 0, finished: 0, deleted: 0},\r\n      entity: -1,\r\n      entities: [],\r\n    });\r\n    function handleStep(nstep){\r\n      setInfo({...info, step: nstep});\r\n    }\r\n    const sendInfo = {info, setInfo}\r\n    return (\r\n        <MuiThemeProvider theme={themeLight}>\r\n            <CssBaseline />\r\n            <div style={{minHeight:'97vh'}}>\r\n                <Container maxWidth=\"lg\">\r\n                    <TitleToolbar />\r\n                </Container>\r\n                <div style={{paddingRight:'1rem',paddingLeft:'3rem'}}>\r\n                    {0 <= info.step && info.step <= 3? \r\n                        <main>\r\n                            <Grid container xs={12} direction=\"column\" justifyContent=\"flex-start\" alignItems=\"center\">\r\n                                <Grid item xs={6}>\r\n                                    <Stepper activeStep={info.step} alternativeLabel>\r\n                                        <Step key={0}>\r\n                                            <StepLabel>Anotador</StepLabel>\r\n                                        </Step>\r\n                                        <Step key={1}>\r\n                                            <StepLabel>Baixar</StepLabel>\r\n                                        </Step>\r\n                                    </Stepper>\r\n                                </Grid>\r\n                                <Grid item xs={12}>\r\n                                    <ButtonGroup variant=\"contained\" color=\"primary\" aria-label=\"contained primary button group\">\r\n                                        <Button onClick={() => {handleStep(info.step-1)}}>Voltar</Button>\r\n                                        <Button disabled={info.step>=1} onClick={() => {handleStep(info.step+1)}}>Avançar</Button>\r\n                                    </ButtonGroup>\r\n                                </Grid>\r\n                                {info.step === 0?\r\n                                    <AnnotationPage {...sendInfo}/>\r\n                                :info.step === 1?\r\n                                    <DownloadPage {...sendInfo}/>\r\n                                :\r\n                                    <ErrorPage />\r\n                                }\r\n                            </Grid>\r\n                        </main>\r\n                    :\r\n                        <UploadPage {...sendInfo} />\r\n                    }\r\n                </div>\r\n            </div>\r\n            <Footer />\r\n        </MuiThemeProvider>\r\n\t);\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Page from './Components/Page.js'\n\nReactDOM.render(<Page />,document.getElementById('root'));\n"],"sourceRoot":""}